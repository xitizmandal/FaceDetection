/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Detection.util;

import haarfilterall.util.CalculateFeature;

/**
 *
 * @author xitiz
 */
public class TestFeatures {

    /**
     * Two layer Horizontal Sliding Window
     */
    public float FeatureA(int[][] intValues, int i, int j, int x, int y) {
        int count = 0;
        int tempFeature = 0;
        int featureValues;
        float tempFeatureValues;

        /**
         * Image area is a class to calculate the area of a certain window
         * generated by the i and j values in the following loop and sliding it
         * through each position of the array which will later be replaced by an
         * image to calculate its features
         */
        CalculateFeature calculateFeature = new CalculateFeature();

        tempFeature = calculateFeature.CalculateSubtractionA(i, j, x, y, count, intValues);

        tempFeatureValues = (float) tempFeature;
        return tempFeatureValues;
    }

    /**
     * Rest of the program follows exactly the same pattern as the above
     * function. Different functions created to reduce the time taken by
     * IF..ELSE statements. Direct calls to the required function implemented.
     */
    /**
     * Two layer Vertical Sliding Window
     */
    public float FeatureB(int[][] intValues, int i, int j, int x, int y) {
        int count = 0;
        int tempFeature = 0;
        int featureValues;
        float tempFeatureValues;

        CalculateFeature calculateFeature = new CalculateFeature();

        tempFeature = calculateFeature.CalculateSubtractionB(i, j, y, x, count, intValues);

        tempFeatureValues = (float) tempFeature;
        return tempFeatureValues;
    }

    /**
     * Three layer Horizontal Sliding Window
     */
    public float FeatureC(int[][] intValues, int i, int j, int x, int y) {
        int count = 0;
        int tempFeature = 0;
        int featureValues;
        float tempFeatureValues;

        CalculateFeature calculateFeature = new CalculateFeature();

        tempFeature = calculateFeature.CalculateSubtractionC(i, j, x, y, count, intValues);

        tempFeatureValues = (float) tempFeature;
        return tempFeatureValues;
    }

    /**
     * Four layer Rectangular Sliding Window
     */
    public float FeatureE(int[][] intValues, int i, int j, int x, int y) {
        int count = 0;
        int tempFeature = 0;
        int featureValues;
        float tempFeatureValues;

        CalculateFeature calculateFeature = new CalculateFeature();

        tempFeature = calculateFeature.CalculateSubtractionE(i, j, x, y, count, intValues);

        tempFeatureValues = (float) tempFeature;
        return tempFeatureValues;
    }
}
